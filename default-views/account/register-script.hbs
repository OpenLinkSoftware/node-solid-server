<script>

 let certData = {};

 document.addEventListener('DOMContentLoaded', main)

 function main() {
    const chkCert = document.getElementById('chkCert')
    chkCert.addEventListener('change', changeGenCert)
    chkCert.checked = true;
    chkCert.click();

    const btnRegister = document.getElementById('register')
    btnRegister.addEventListener('click', runRegister)

    const btnContinue = document.getElementById('btn_continue')
    btnContinue.addEventListener('click', runContinue)
 }


 
 function changeGenCert() {
    const chkCert = document.getElementById('chkCert')
    const certData = document.getElementById('certData')
    certData.hidden = !chkCert.checked
 }

 function runContinue() {
   document.getElementById('certificatePEM').value = certData.pem
   document.getElementById('certificatePKCS12').value = certData.pkcs12B64
   document.getElementById('reg-form').submit()
 }


 function runRegister() {

    document.getElementById('cert_progress').hidden = false
    document.getElementById('cert_wait').hidden = false
    document.getElementById('cert_ready').hidden = true
    document.getElementById('p12-cert').hidden = true
    document.getElementById("pkcs12-download").removeAttribute("href");
    document.getElementById('certificatePEM').value = ''
    document.getElementById('certificatePKCS12').value = ''

    certData = {};

    let needCreateCert = document.getElementById('chkCert').checked
    let username = document.getElementById("username").value
    let name = document.getElementById("name").value

    let el = document.getElementById("password")
    let userpwd =  el ? el.value : ''
    el = document.getElementById("email")
    let email = el ? e.value : ''

    if (username.length < 1) {
      alert('Username is empty')
      return
    }

{{#if authTls}}
{{else}}
    if (userpwd.length < 1) {
      alert('Password is empty')
      return
    }
{{/if}}

    if (name.length < 1) {
      name = username
    }

    if (!needCreateCert) {
      document.getElementById('reg-form').submit()
    } 
    else {
      let certOrg = document.getElementById("cert_Org").value;
      let certState = document.getElementById("cert_State").value;
      let certCountry = document.getElementById("cert_Country").value;

      let webId = location.protocol+'//'+username+'.'+location.host+'/profile/card#me'

      if (certCountry.length > 0 && certCountry.length!=2) {
        alert('Country must be two characters')
        return
      }

      let certPwd = document.getElementById("cert_pwd").value;
      let certPwd1 = document.getElementById("cert_pwd1").value;

      if (certPwd.length < 1)  {
        alert('Certificate password could not be empty')
        return
      }
      if (certPwd != certPwd1)  {
        alert('Confirm certificate password with properly value')
        return
      }

      const dlg = $('#certModal')
      dlg.modal('show')

      setTimeout(function() {
        certData = genCert(name, email, certOrg, certState, certCountry, webId, certPwd)

        var p12Url = "data:application/x-pkcs12;base64," + certData.pkcs12B64;
        document.getElementById("pkcs12-download").setAttribute("href", p12Url);
        document.getElementById('p12-cert').hidden = false

        document.getElementById('cert_progress').hidden = true
        document.getElementById('cert_wait').hidden = true
        document.getElementById('cert_ready').hidden = false

      }, 500);
    }

    return false
 }


 function genCert(certName, certEmail, certOrg, certState, certCountry, webId, pwd) {
   let pki = forge.pki

   // generate a keypair and create an X.509v3 certificate
   let keys = pki.rsa.generateKeyPair(2048)
   var cert = pki.createCertificate()
   cert.publicKey = keys.publicKey
   // NOTE: serialNumber is the hex encoded value of an ASN.1 INTEGER.
   // Conforming CAs should ensure serialNumber is:
   // - no more than 20 octets
   // - non-negative (prefix a '00' if your value starts with a '1' bit)
   cert.serialNumber = (Date.now()).toString(16)

   cert.validity.notBefore = new Date()
   cert.validity.notAfter = new Date()
   cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 1)

   let attrs = [];
   if (certName && certName.length > 1) {
     attrs.push({ name: 'commonName', value: certName })
   }

   if (certCountry && certCountry.length > 1) {
      attrs.push({ name: 'countryName', value: certCountry })
   }

   if (certState && certState.length > 1) {
      attrs.push({ shortName: 'ST', value: certState })
   }

   if (certOrg && certOrg.length > 1) {
      attrs.push({ name: 'organizationName', value: certOrg })
   } else {
      attrs.push({ name: 'organizationName', value: 'WebID' })
   }

   if (certEmail && certEmail.length > 1) {
      attrs.push({ name: 'emailAddress', value: certEmail})
   }

   cert.setSubject(attrs);
   cert.setIssuer(attrs);
   cert.setExtensions([
     { name: 'basicConstraints',  cA: true,  critical: true}, 
     { name: 'keyUsage',  digitalSignature: true }, 
     { name: 'extKeyUsage', clientAuth: true }, 
     { name: 'nsCertType', client: true }, 
     { name: 'subjectAltName',
         altNames: [{
           type: 6, // URI
           value: webId
         }]
     }, 
     { name: 'subjectKeyIdentifier'}
   ])

   cert.sign(keys.privateKey, forge.md.sha512.create())

   let pemCert = pki.certificateToPem(cert);

   let p12Asn1 = forge.pkcs12.toPkcs12Asn1(keys.privateKey, [cert], pwd,
        {generateLocalKeyId: true, 
         friendlyName: 'solid-cert',
         algorithm: '3des'
        })

   let p12Der = forge.asn1.toDer(p12Asn1).getBytes()
   let p12B64 = forge.util.encode64(p12Der)

   return {pem: pemCert, pkcs12B64: p12B64}
 }



</script>
