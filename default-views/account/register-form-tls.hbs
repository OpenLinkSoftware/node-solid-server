<div class="row">
  <div class="col-md-6">
    <div class="panel panel-default">
      <div class="panel-body">

        <form method="post" id="reg-form" action="/api/accounts/new"  onsubmit="return validatePasswordBeforeSubmit(e)">
          {{> shared/error}}

          <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" class="form-control" name="username" id="username" placeholder="alice" required />
          </div>
          <div class="row">
            <label for="name">Name:</label>
            <input type="text" class="form-control" name="name" id="name" value="{{name}}"/>
          </div>
          <div class="row">
            <label for="externalWebId">WebID:</label>
            <input type="text" class="form-control" name="externalWebId" id="externalWebId" value="{{webid}}" />
          </div>

          <input type="hidden" name="returnToUrl" value="{{returnToUrl}}" />
          <input type="hidden" name="certificatePEM" id="certificatePEM" value="" />
          <input type="hidden" name="certificatePKCS12" id="certificatePKCS12" value="" />

          {{> auth/auth-hidden-fields}}
        </form>

{{> account/register-certdata}}

      </div>
    </div>

  <div class="form-group">
      <div class="col-md-2">
        <button type="button" class="btn btn-primary" id="register">Register</button>
      </div>
  </div>

<!-- end_col -->
  </div>

  <div class="col-md-6">
    <div class="panel panel-default panel-already-registered">
      <div class="panel-body">
        <h2>Already have an account?</h2>
        <p>
          <a class="btn btn-lg btn-success" href="{{{loginUrl}}}">
            Please Log In
          </a>
        </p>
      </div>
    </div>
  </div>

{{> account/register-cert-popup}}

</div>

<script src="/common/js/owasp-password-strength-test.js"
        defer></script>

<script>
  (function () {
    'use strict'
    var showPasswordToggle = document.getElementById('showPassword')
    var password = document.getElementById('password')
    showPasswordToggle.addEventListener('change', function () {
      password.type = password.type === 'password' ? 'text' : 'password'
    })
  })()

  function validatePasswordBeforeSubmit (e) {
        e.preventDefault();
        const pwdErrorDiv = document.getElementById('passwordHelp');
        let pw = document.getElementById('password').value;
        let owaspCheck = owaspPasswordStrengthTest.test(pw)
        if (owaspCheck.strong === true) {
            pwdErrorDiv.innerText = '';
            sha1(pw).then((digest) => {
              const preFix = digest.slice(0, 5);
              const url = 'https://api.pwnedpasswords.com/range/';
              fetch(url+preFix).then(
                response => response.text()
              ).then(
                data => {
                  if (data.indexOf(digest) !== -1) {
                      pwdErrorDiv.innerText = 'This password was exposed in a data breach. Please use a more secure alternative one!';
                      return false;
                  }
                }
              )
            });
        }
        else {
            pwdErrorDiv.innerText = owaspCheck.requiredTestErrors[0]
            return false;
        }
        return true;
    }

    function sha1(str) {
        let buffer = new TextEncoder("utf-8").encode(str);
        return crypto.subtle.digest("SHA-1", buffer).then(function (hash) {
            return hex(hash);
        });
    }

    function hex(buffer) {
        let hexCodes = [];
        let view = new DataView(buffer);
        for (let i = 0; i < view.byteLength; i += 4) {
            let value = view.getUint32(i);
            let stringValue = value.toString(16);
            const padding = '00000000';
            let paddedValue = (padding + stringValue).slice(-padding.length);
            hexCodes.push(paddedValue);
        }
        return hexCodes.join("");
    }
</script>

